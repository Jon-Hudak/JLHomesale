---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

import "../styles/style.css";
import { ViewTransitions } from "astro:transitions";

const { title = "JL Home Sale" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta HTTP-EQUIV="Content-type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="" />
    <meta name="author" content="" />

    <title>{title}</title>

    <!-- Google Fonts -->
    <link
      href="https://fonts.googleapis.com/css?family=Poppins:300,400,600|Source+Serif+Pro:400,600&display=swap"
      rel="stylesheet"
    />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
      crossorigin="anonymous"
    />

    <!-- Google tag (gtag.js)-->
    <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=AW-11160695389"></script>
    <script is:inline>
      //@ts-nocheck
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "AW-11160695389");
    </script>

    <!-- Facebook Pixel Code -->
    <script is:inline>
      //@ts-nocheck
      !(function (f, b, e, v, n, t, s) {
        if (f.fbq) return;
        n = f.fbq = function () {
          n.callMethod
            ? n.callMethod.apply(n, arguments)
            : n.queue.push(arguments);
        };
        if (!f._fbq) f._fbq = n;
        n.push = n;
        n.loaded = !0;
        n.version = "2.0";
        n.queue = [];
        t = b.createElement(e);
        t.async = !0;
        t.src = v;
        s = b.getElementsByTagName(e)[0];
        s.parentNode.insertBefore(t, s);
      })(
        window,
        document,
        "script",
        "https://connect.facebook.net/en_US/fbevents.js"
      );
      fbq("init", "419888609948087");
      fbq("track", "PageView");
    </script>
    <noscript data-astro-transition-persist="pixel">
      <img
        height="1"
        width="1"
        src="https://www.facebook.com/tr?id=419888609948087&ev=PageView
		  &noscript=1"
      />
    </noscript>
    <!-- End Facebook Pixel Code -->
    <ViewTransitions />
  </head>

  <body class="dark:bg-neutral-800">
    <noscript data-astro-transition-persist="gtag"
      ><iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-59V7B37K"
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe></noscript
    >
    <!-- End Google Tag Manager (noscript) -->
    <Header />
    <slot />
    <Footer />
  </body>

  <style is:global>
    @media (prefers-color-scheme: dark) {
     
    }
    :root {
      /* --accent: 136, 58, 234;
      --accent-light: 224, 204, 250;
      --accent-dark: 49, 10, 101;
      --accent-gradient: linear-gradient(
        45deg,
        rgb(var(--accent)),
        rgb(var(--accent-light)) 30%,
        white 60%
      ); */
      --background: #2c3e50;
      --backgroundLight: #000000;
      --accent: #5fcf80;
    }
    html {
      font-family: system-ui, sans-serif;
      background-size: 224px;
    }
    code {
      font-family:
        Menlo,
        Monaco,
        Lucida Console,
        Liberation Mono,
        DejaVu Sans Mono,
        Bitstream Vera Sans Mono,
        Courier New,
        monospace;
    }

    .accent-underline::after {
      content: "";
      display: block;
      background-color: var(--accent);
      height: 5px;
      width: 6rem;
      border-radius: 10px;
      margin-block: 0.75rem 0;
    }

    .inputWrapper {
        color: black;
        position: relative;
        font-size: 1rem;
        margin: 3px;
      }

      .inputWrapper label:not(.inline-label) {
        position: absolute;
        top: 20%;
        left: 1rem;

        transition: 200ms;
      }

      .inputWrapper textarea ~ :where(label) {
        top: 1.5rem;
      }
      .inputWrapper:is(:hover, :active, :focus-within) label:not(.inline-label),
      .inputWrapper > :not(:placeholder-shown) ~ label:not(.inline-label) {
        scale: 80%;
        transform-origin: top;
        top: 0rem;
        left: 0%;
        opacity: 70%;
      }
      .inputWrapper input,
      .inputWrapper textarea {
        @apply text-base border border-neutral-400 rounded-md  w-full;
      }
      .inputWrapper input {
        min-height: 2rem;
        padding: 1.5rem 1rem 0.75rem 1rem;
        box-sizing: border-box;
      
      }
      .inputWrapper textarea {
        padding: 2rem 1rem;
        box-sizing: border-box;
      }
      
  </style>

  <script is:inline>
    document.addEventListener("astro:page-load", () => {
     
      // This only runs once.

      //tabs
      if (document.querySelector(".tab-wrapper")) {
        const tabWrapper = document.querySelector(".tab-wrapper");
        const tabList = tabWrapper.querySelector("ul");
        const tabButtons = tabList.querySelectorAll("a");
        const tabPanels = tabWrapper.querySelectorAll(
          ".tab-content-wrapper>article"
        );

        tabList.setAttribute("role", "tablist");
        tabList.querySelectorAll("li").forEach((listitem) => {
          listitem.setAttribute("role", "presentation");
        });

        tabButtons.forEach((tab, index) => {
          tab.setAttribute("role", "tab");
          if (index === 0) {
            tab.setAttribute("aria-selected", "true");
          } else {
            tab.setAttribute("tabindex", "-1");
            tabPanels[index].setAttribute("hidden", "true");
          }
          tabPanels.forEach((panel) => {
            panel.setAttribute("role", "tabpanel");
            panel.setAttribute("tabindex", "0");
          });
        });

        tabList.addEventListener("click", (e) => {
          //@ts-ignore
          const clickedTab = e.target.closest("a");
          if (!clickedTab) return;
          e.preventDefault();
          switchTab(clickedTab);
        });
        tabWrapper.addEventListener("keydown", (e) => {
          switch (e.key) {
            case "ArrowLeft":
              moveLeft();
              break;
            case "ArrowRight":
              moveRight();
              break;
            case "Home":
              e.preventDefault()
              switchTab(tabButtons[0]);
              break;
            case "End":
              e.preventDefault();
              switchTab(tabButtons[tabButtons.length-1]);
              break;
          }
        });
        function moveLeft() {
          const currentTab = document.activeElement;

          if (!currentTab.parentElement.previousElementSibling) {
            switchTab(tabButtons[tabButtons.length - 1]);
          } else {
            switchTab(
              currentTab.parentElement.previousElementSibling.querySelector("a")
            );
          }
        }
        function moveRight() {
          const currentTab = document.activeElement;

          if (!currentTab.parentElement.nextElementSibling) {
            switchTab(tabButtons[0]);
          } else {
            switchTab(
              currentTab.parentElement.nextElementSibling.querySelector("a")
            );
          }
        }
        function switchTab(newTab) {
          const activePanelId = newTab.getAttribute("href");
          //@ts-ignore
          const activePanel = document.querySelector(activePanelId);

          tabButtons.forEach((button) => {
            button.setAttribute("aria-selected", false);
            button.setAttribute("tabindex", "-1");
          });

          tabPanels.forEach((panel) => {
            panel.setAttribute("hidden", "true");
          });
          activePanel.removeAttribute("hidden");

          newTab.setAttribute("aria-selected", true);
          newTab.setAttribute("tabindex", "0");
          newTab.focus();
        }
      }
    });
  </script>
</html>
